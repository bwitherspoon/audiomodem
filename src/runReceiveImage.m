% Copyright (c) 2015, C. Brett Witherspoon <cbwithersp42@students.tntech.edu>
% 
% Permission to use, copy, modify, and/or distribute this software for any
% purpose with or without fee is hereby granted, provided that the above
% copyright notice and this permission notice appear in all copies.
% 
% THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
% WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
% MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
% ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
% WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
% ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
% OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

function runReceiveImage()
% Receives an image
%
% See README.md

param = SystemParameters();

fprintf('Bitrate: %.1f\n', param.BitRate);
fprintf('Samples per frame %d\n', param.SamplesPerFrame);
fprintf('Bytes per frame %d\n', param.BytesPerFrame);

if audiodevinfo(1, param.SampleRate, 16, 1) == -1
    error('Audio card and/or sampling rate not supported');
end

% System objects
Src = dsp.AudioRecorder(...
    'NumChannels', 1, ...
    'SampleRate', param.SampleRate, ...
    'SamplesPerFrame', param.SamplesPerFrame);
Rx = Receiver(...
    'ModulationOrder', param.ModulationOrder, ...
    'BitOutput', true, ...
    'SampleRate', param.SampleRate, ...
    'SamplesPerSymbol', param.SamplesPerSymbol, ...
    'RRCFilterSpanInSymbols', param.RRC.FilterSpanInSymbols, ...
    'RRCRolloffFactor', param.RRC.RolloffFactor, ...
    'DDCDecimationFactor', param.ResamplingFactor, ...
    'DDCStopbandAttenuation', param.DDC.StopbandAttenuation, ...
    'DDCPassbandRipple', param.DDC.PassbandRipple, ...
    'DDCCenterFrequency', param.CenterFrequency, ...
    'TimingErrorUpdateGain', param.Timing.ErrorUpdateGain, ...
    'PreambleUniqueWord', param.Preamble.UniqueWord, ...
    'PreambleCount', param.Preamble.Count, ...
    'PreambleThreshold', param.Preamble.Threshold, ...
    'DescramblerPolynomial', param.Scrambling.Polynomial, ...
    'DescramblerInitialConditions', param.Scrambling.InitialConditions, ...
    'DecoderEnabled', param.Coding.Enabled, ...
    'DecoderTrellisStructure', param.Coding.TrellisStructure, ...
    'DecoderPuncturePattern', param.Coding.PuncturePattern, ...
    'DecoderTracebackDepth', param.Coding.TracebackDepth, ...
    'ShowSpectrum', true, ...
    'ShowConstellation', true);
Sink = ImageSink('Verbose', true);

while true
    fprintf('Waiting for transmitted image...\n');
    complete = false;
    while ~complete
        passband = Src.step();
        stream = Rx.step(passband);
        if ~isempty(stream)
            complete = Sink.step(stream);
        end
    end
    fprintf('Image received\n');
end

end
